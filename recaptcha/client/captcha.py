""" Register for your free reCAPTCHA Public/Private API keys here: http://www.google.com/recaptcha
	
	NOTE: The captcha.py module uses "reCAPTCHA" API keys, NOT "reCAPTCHA Mailhide" 
	API keys. Both are separate API's and both use different, incompatible keys.
	
	General usage pattern:
		
		1)  from recaptcha.client.captcha import displayhtml, submit
		2)  Call displayhtml(), passing your Public reCAPTCHA API Key.
		3)  Receive HTML generated by displayhtml().
		4)  Place HTML into a <form>.
		5)  Render <form> to user as a webpage.
		6)  ...user attempts re-captcha in their browser...
		7)  ...user 'submits' the form to the web server...
		8)  Server accepts POST request from user.
		9)  Server extracts 'recaptcha_challenge_field' and 'recaptcha_response_field' from the POST request.
		10) Server extracts the users IP address from the request.
		11) Pass the three variables from steps 9 and 10, plus your Private reCAPTCHA API Key, to submit()
		12) submit() contacts the reCAPTCHA server, asking if the reCAPTCHA was correct or not, and receives a response.
		13) submit() returns a RecaptchaResponse() object.
		14) Check RecaptchaResponse.is_valid:
				- If it's True, the reCAPTCHA passed.
				- If False, it did not, and RecaptchaResponse.error_code will be set.
	
	See comments inside RecaptchaResponse(), displayhtml(), and submit() for more details, and 
	additional arguments/options which can be passed. You can also specify to use SSL when 
	contacting the reCAPTCHA servers.
"""

import urllib.request, urllib.error, urllib.parse

API_SSL_SERVER	= "https://www.google.com/recaptcha/api"
API_SERVER		= "http://www.google.com/recaptcha/api"


class RecaptchaResponse(object):
	""" The response returned from the reCAPTCHA server, indicating 
		if the submitted reCAPTCHA was correct or not.
		
		
		_____Attributes_____
		
		is_valid   - True/False, incidating if reCAPTCHA was successful or not.
		error_code - If |is_valid| is False, an error code string.
		
		
		_____Discussion_____
		
		An instance of this object is returned by submit(). You can 
		check its attributes to see if the reCAPTCHA was successful. 
		There is no need for you to create an instance of this object 
		yourself.
		
		Error codes are documented here, and may change in the future: 
		http://code.google.com/apis/recaptcha/docs/verify.html
		
		If you pass your own custom |error| to displayhtml(), it will 
		appear here instead of reCAPTCHA's error code.
	"""
	
	def __init__(self, is_valid, error_code=None):
		self.is_valid 	= is_valid
		self.error_code = error_code
	


def displayhtml(public_key, use_ssl=False, error=None):
	""" Generates and returns the HTML to display for reCAPTCHA.
		
		
		_____Parameters_____
		
		public_key - Your Public reCAPTCHA API Key.
		use_ssl    - If True, the reCAPTCHA request is sent over SSL.
		error      - An error message, returned by submit(), in RecaptchaResponse.error_code, if error occurs.
		
		
		_____Return Value_____
		
		- reCAPTCHA HTML ready to be inserted inside a <form>.
		
		
		_____Discussion_____
		
		Place this HTML somewhere inside your <form> code. After 
		the user submits the form, capture 'recaptcha_challenge_field' 
		and 'recaptcha_response_field' from the HTTP POST request.
		Then, pass them to submit() along with other required 
		arguments.
		
		You should also capture the IP address of the client who 
		submitted the reCAPTCHA form; this must be passed to the 
		submit() method next.
	"""
	
	error_param = ''
	if error:
		error_param = '&error=%s' % error
	
	if use_ssl:
		server = API_SSL_SERVER
	else:
		server = API_SERVER
	
	html_values = {
		'ApiServer':  server, 
		'PublicKey':  public_key, 
		'ErrorParam': error_param, 
	}
	
	html = 	"""<script type="text/javascript" src="%(ApiServer)s/challenge?k=%(PublicKey)s%(ErrorParam)s"></script>""" \
			"""<noscript>""" \
			"""  <iframe src="%(ApiServer)s/noscript?k=%(PublicKey)s%(ErrorParam)s" height="300" width="500" frameborder="0"></iframe><br />""" \
			"""  <textarea name="recaptcha_challenge_field" rows="3" cols="40"></textarea>""" \
			"""  <input type='hidden' name='recaptcha_response_field' value='manual_challenge' />""" \
			"""</noscript>""" % html_values
	
	return html


def submit(recaptcha_challenge_field, recaptcha_response_field, private_key, remoteip, use_ssl=False, timeout_seconds=None):
	""" Submits a reCAPTCHA request for verification. Returns a 
		RecaptchaResponse object containing info if the request 
		was successful or not.
		
		
		_____Parameters_____
		
		recaptcha_challenge_field - The value of recaptcha_challenge_field from the form.
		recaptcha_response_field  - The value of recaptcha_response_field from the form.
		private_key               - Your Private reCAPTCHA API Key.
		remoteip                  - IP address of the user submitting the reCAPTCHA.
		use_ssl					  - True/False if SSL should be used or not.
		timeout_seconds			  - Seconds to wait for urllib to connect to reCAPTCHA servers.
		
		
		_____Return Value_____
		
		- RecaptchaResponse.is_valid == True if successful.
		- RecaptchaResponse.is_valid == False if failure.
			- RecaptchaResponse.error_code will also be set.
		
		
		_____Discussion_____
		
		Returns RecaptchaResponse.is_valid == False if either 
		'recaptcha_response_field' or 'recaptcha_challenge_field' 
		are not provided, or are empty strings.
		
		Internally, if urllib.error.URLError is raised due to a 
		problem connecting to the reCAPTCHA server,  
		RecaptchaResponse.is_valid == False will be returned and 
		RecaptchaResponse.error_code will be set to a string 
		"urllib.error.URLError exception was raised: %s", where %s 
		contains info about the exception. This can occur if 
		the internet connection is down, the connection times 
		out, the reCAPTCHA server refuses the connection, etc...
		See the urllib docs for info.
		
		You should set |use_ssl| to True to protect your 
		|private_key|. Otherwise it's sent in plain-text to 
		the reCAPTCHA server.
		
		WARNING: Interally, urllib.request.urlopen() will not do 
		any verification of the servers certificate if SSL is 
		used. This is a limitation of the API.
	"""
	
	if not (recaptcha_response_field and recaptcha_challenge_field and len(recaptcha_response_field) and len(recaptcha_challenge_field)):
		return RecaptchaResponse(is_valid=False, error_code='incorrect-captcha-sol')
	
	if use_ssl:
		server = API_SSL_SERVER
	else:
		server = API_SERVER
	
	
	post_data = {
		'privatekey': private_key,
		'remoteip' :  remoteip,
		'challenge':  recaptcha_challenge_field,
		'response' :  recaptcha_response_field,
	}
	
	params = urllib.parse.urlencode(post_data)
	params = params.encode('utf-8')
	
	request = urllib.request.Request(
				url		= "%s/verify" % server,
				data 	= params,
				headers = {"Content-type":"application/x-www-form-urlencoded", "User-agent":"reCAPTCHA Python"},
			)
	
	
	try:
		http_response = urllib.request.urlopen(url=request, timeout=timeout_seconds)
	except urllib.error.URLError as e:
		error = "urllib.error.URLError exception was raised: %s" % e
		return RecaptchaResponse(is_valid=False, error_code=error)
	
	
	return_values = http_response.read().splitlines()
	http_response.close()
	return_code = return_values[0]
	
	if (return_code == b'true'):
		return RecaptchaResponse(is_valid=True)
	else:
		return RecaptchaResponse(is_valid=False, error_code=return_values[1])
